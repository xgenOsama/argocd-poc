global:
  domain: argocd.example.com
server:
  certificate:
    enabled: false ## Let it be false as we will create our own cert
    secretName: argocd-selfsigned-tls
  service:
    type: NodePort
  replicas: 1
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    hosts:
      - host: argocd.example.com
        paths:
          - path: /
            pathType: Prefix
            service:
              name: argocd-demo-server
              port:
                number: 80
    tls:
      - hosts:
          - argocd.example.com
        secretName: argocd-selfsigned-tls
    https: false
configs:
  # params:
  #   server.basehref: https://argocd.example.com
  #   server.insecure: false
  cm:
    url: "https://argocd.example.com:8085"
  params:
    server.insecure: "true"
  rbac:
    policy.default: role:readonly  # Default role for unauthenticated users

    policy.csv: |
      g, user1, role:developer    # Map user1 to the developer role
      g, user2, role:admin        # Map user2 to the admin role

    role.developer: |
      p, role:developer, applications, get, */*, allow
      p, role:developer, applications, sync, */*, allow
      p, role:developer, applications, create, */*, allow
      p, role:developer, applications, delete, */*, allow
      p, role:developer, clusters, get, *, allow
      p, role:developer, repositories, get, *, allow

    role.admin: |
      p, role:admin, *, *, *, allow